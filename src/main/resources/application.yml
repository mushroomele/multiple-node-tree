server:
  port: 8888
  servlet:
    context-path: /multiple-node-tree
spring:
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/multiple_node_tree?useUnicode=true&characterEncoding=utf8
    username: wangyanjun
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      initial-size: 20
      max-active: 300
      min-idle: 20
      max-wait: 30000

  redis:
    host: 127.0.0.1
    port: 6379
    password: 123456
    jedis:
      pool:
        max-active: 8
        max-wait: 1
        max-idle: 8
        min-idle: 0
    timeout: 1000

# kafka和rabbitmq统一用spring-cloud-stream
  cloud:
    stream:
      binders: # 在此处配置要绑定的rabbitmq的服务信息；
        rabbit: # 表示定义的名称，用于于binding整合
          type: rabbit # 消息组件类型
          environment: # 设置rabbitmq的相关的环境配置
            spring:
              rabbitmq:
                addresses: 127.0.0.1:5672
                username: guest
                password: guest
      bindings: # 服务的整合处理CompletableFuture
        test-input: # 这个名字是一个通道的名称
          destination: exchange_test # rabbit:Exchange ; kafka:topic
          content-type: application/json # 设置消息类型，本次为对象json，如果是文本则设置“text/plain”
          acknowledge-mode: MANUAL #确认机制
          #          auto-bind-dlq: true #死信队列
          #          republish-to-dlq: true #放入异常信息进死信队列中
          binder: rabbit # 设置要绑定的消息服务的具体设置
          group: queue_test
        test-output:
          destination: exchange_test_output
          content-type: application/json
          binder: rabbit
      rabbit:
        bindings:
          test-input:
            consumer:
              binding-routing-key: key_test
              acknowledge-mode: MANUAL #确认机制
            ttl: 86400000
          test-output:
            producer: # 进行生产端配置
              routing-key-expression: '''key_test_output''' #定义 RoutingKey 的表达式配置
              exchangeType: topic
            ttl: 86400000

mybatis:
  mapper-locations: classpath:/mapper/*Mapper.xml
  type-aliases-package: com.yanjunwang.multiple-node-tree.model
logging:
  level:
    com.yanjunwang.multiple_node_tree.dao: debug


